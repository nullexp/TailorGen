package {{ .PackageName }}

import "time"

type {{ .EntityName }} struct {
	Id        string    `json:"id" db:"id"`           // Required field
	CreatedAt time.Time `json:"createdAt"` // Required field
	UpdatedAt time.Time `json:"updatedAt"` // Required field
	{{- range .Fields }}
	{{ .Name }} {{ .Type }} `json:"{{ .JsonTag }}"` // {{ .Description }}
	{{- end }}
}

{{ if .HasEnums }}
// Enums
{{ range .Enums }}
type {{ .Name }} = string

const (
	{{- range .Values }}
	{{ .Name }} {{ $.Name }} = "{{ .Value }}"
	{{- end }}
)
{{ end }}
{{ end }}

const (
	// Field constants
	Field{{ .EntityName }}Id        = "id"
	Field{{ .EntityName }}CreatedAt = "created_at"
	Field{{ .EntityName }}UpdatedAt = "updated_at"
	{{- range .Fields }}
	Field{{ $.EntityName }}{{ .Name }} = "{{ .Name }}"
	{{- end }}
)

const (
	{{- range .FieldConstants }}
	Field{{ .Name }} = "{{ .Value }}"
	{{- end }}
)

// Methods for {{ .EntityName }}
func (e {{ .EntityName }}) IsIdEmpty() bool {
	return e.Id == ""
}

func (e *{{ .EntityName }}) SetId(id string) {
	e.Id = id
}

func (e {{ .EntityName }}) GetCreatedAt() time.Time {
	return e.CreatedAt
}

func (e {{ .EntityName }}) GetUpdatedAt() *time.Time {
	if e.CreatedAt.Equal(e.UpdatedAt) {
		return nil
	}
	return &e.UpdatedAt
}

func (e {{ .EntityName }}) GetUuid() string {
	return e.Id
}
